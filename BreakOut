#include <stdio.h>
#include <iostream>
#include <allegro5/allegro.h>
using namespace std;

int main() {
	ALLEGRO_DISPLAY *display = NULL;
	ALLEGRO_EVENT_QUEUE *event_queue = NULL;
	ALLEGRO_TIMER *timer = NULL;
	ALLEGRO_BITMAP *bouncer = NULL;
	ALLEGRO_BITMAP *square = NULL;
	ALLEGRO_BITMAP *bouncer2 = NULL;
	
	//Where you want your square to start
	float square_x = 30;
	float square_y = 200;
	//Where you want your bouncer to start
	float bouncer_x = 30;
	float bouncer_y = 30;
	//Key States: All starting as "false" because nothing has been pressed yet
	//The first slots represents "up", "down", "left" and "right"
	bool key[4] = { false, false, false, false };
	//The bouncer's x and y directions, initially set to -4, 4
	//Tells bouncer where the direction it goes in
	//Thw variables say how fast it goes
	float bouncer_dx = -4.0, bouncer_dy = 4.0;
	//Don't redraw until an event happens
	bool redraw = true;
	//This controls the game loop
	bool doexit = false;

	al_init();

	//Gets the keyboard ready to use
	al_install_keyboard();
	//Set the timer so it "ticks" at 2 milliseconds
	timer = al_create_timer(.02);
	//Size of the Screen
	display = al_create_display(640, 480);
	//create a little 32x32 square
	bouncer = al_create_bitmap(32, 32);
	//Create a little 32x32 square
	square = al_create_bitmap(110, 20);
	al_set_target_bitmap(square);
	al_clear_to_color(al_map_rgb(255, 2, 5));
	al_set_target_bitmap(al_get_backbuffer(display));
	event_queue = al_create_event_queue();
	//use this to *draw* your own bitmaps (instead of loading them from a file)
	//before we used al_load_bitmap()
	al_set_target_bitmap(bouncer);
	al_clear_to_color(al_map_rgb(255, 100, 100));
	al_set_target_bitmap(al_get_backbuffer(display));
	event_queue = al_create_event_queue();
	al_register_event_source(event_queue, al_get_display_event_source(display));
	al_register_event_source(event_queue, al_get_keyboard_event_source());
	//register the timer as an event source so it can generate events
	al_register_event_source(event_queue, al_get_timer_event_source(timer));
	al_clear_to_color(al_map_rgb(0, 0, 0));
	al_flip_display();
	//Starts the timer/game
	al_start_timer(timer);

	while (!doexit)
	{
		ALLEGRO_EVENT ev;
		//This function will wait forever if no events come in
		al_wait_for_event(event_queue, &ev);
		//this section handles the bouncing-off-the-edges action
		//sets this part of the game to run on the clicks of the timer 
		if (ev.type == ALLEGRO_EVENT_TIMER) {
			//if the box hits the left wall OR the right wall
			if (bouncer_x < 0 || bouncer_x > 640 - 32) {
				//flip the x direction
				bouncer_dx = -bouncer_dx;
			}
			//if the box hits the top wall OR the bottom wall
			if (bouncer_y < 0 || bouncer_y > 480 - 32) {
				//flip the y direction
				bouncer_dy = -bouncer_dy;
			}
			//really important code!
			//move the box in a diagonal
			bouncer_x += bouncer_dx;
			bouncer_y += bouncer_dy;

			//if the up button is pressed AND we're still below the top wall,
			//move the box "up" by 4 pixels
			if (key[0] && square_y >= 0) {
				square_y -= 4.0;
			}
			
			//if the down button is pressed AND we're still above the bottom wall
			//move the box "down" by 4 pixels
			if (key[1] && square_y <= 480 - 32) {
				square_y += 4.0;
			}
			
			//if the left button is pressed AND we're still right of the left wall
			//move the box left by 4 pixels
			if (key[2] && square_x >= 0) {
				square_x -= 4.0;
			}
			
			//if the left button is pressed AND we're still left of the right wall
			//move the box right by 4 pixels
			if (key[3] && square_x <= 640 - 32) {
				square_x += 4.0;
			}
			
			//if an event happened, you better redraw
			redraw = true;
		}

		//////////////////////////////////////////////////////////////////
		//kill program if the user clicks the exit button
		else if (ev.type == ALLEGRO_EVENT_DISPLAY_CLOSE) {
			break;
		}

		//////////////////////////////////////////////////////////////////////////////////////////////////////
		//here's the algorithm that turns key presses into events
		//a "key down" event is when a key is pushed
		//while a "key up" event is when a key is released

		//has something been pressed on the keyboard?
		else if (ev.type == ALLEGRO_EVENT_KEY_DOWN) {

			//"keycode" holds all the different keys on the keyboard
			switch (ev.keyboard.keycode) {

				//if the up key has been pressed
			case ALLEGRO_KEY_UP:
				key[0] = true;
				break;
			
				//if the down key has been pressed
			case ALLEGRO_KEY_DOWN:
				key[1] = true;
				break;
			
				//if the left key has been pressed
			case ALLEGRO_KEY_LEFT:
				key[2] = true;
				break;
			
				//if the right key has been pressed
			case ALLEGRO_KEY_RIGHT:
				key[3] = true;
				break;
			
			}
		}
		//has something been released on the keyboard?
		else if (ev.type == ALLEGRO_EVENT_KEY_UP) {
			switch (ev.keyboard.keycode) {
			case ALLEGRO_KEY_UP:
				key[0] = false;
				break;
		

			case ALLEGRO_KEY_DOWN:
				key[1] = false;
				break;
			
			case ALLEGRO_KEY_LEFT:
				key[2] = false;
				break;
			

			case ALLEGRO_KEY_RIGHT:
				key[3] = false;
				break;
			

				//kill the program if someone presses escape
			case ALLEGRO_KEY_ESCAPE:
				doexit = true;
				break;
			}
		}


		//render section: draws stuff
		//if you were supposed to redraw but there wasn't an event, don't redraw
		//cout << "Square 1 " << square_x << ", " << square_y << endl;
		if (redraw && al_is_event_queue_empty(event_queue)) {
			redraw = false;

			al_clear_to_color(al_map_rgb(0, 0, 0)); //comment this out :)

													//here's where the magic happens: draw the square to the screen
													//at the coordinate position bouncer_x, bouncer_y
			al_draw_bitmap(bouncer, bouncer_x, bouncer_y, 0);
			al_draw_bitmap(square, square_x, square_y, 0);
			
			al_flip_display();

		}
	}//end game loop

	al_destroy_bitmap(square);

	al_destroy_bitmap(bouncer);
	al_destroy_timer(timer);
	al_destroy_display(display);
	al_destroy_event_queue(event_queue);

	return 0;
}
