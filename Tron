#include <iostream>
#include <Windows.h>
#include <stdio.h>
#include <allegro5/allegro.h>
#include<allegro5/allegro_primitives.h>

const int TronSize = 30;
const int WallSize = 40;
using namespace std;
int PlattformCollide(int X,int Y, int dir, int Map[25][25]);
int Map[25][25] = {
	//  0 0 3 4 5 6 7 8 9 0 0 0 3 4 5 6 7 8 9 0 0 0 3 4 5
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1, //0
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1, //0
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1, //3
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1, //4
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1, //5
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1, //6
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1, //7
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1, //8
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1, //9
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1, //10
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1, //11
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1, //12
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1, //13 
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1, //14
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1, //15
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1, //16
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1, //17
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1, //18
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1, //19
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1, //20
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1, //21
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1, //22
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1, //23
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1, //24
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 //25
};

enum directions { Up, Down, Left, Right };

int main() {
	al_init();
	al_init_primitives_addon();
	ALLEGRO_DISPLAY *Display = NULL;
	ALLEGRO_EVENT_QUEUE *Event_Queue = NULL;
	ALLEGRO_TIMER *Timer = NULL;
	ALLEGRO_BITMAP *Square = NULL;
	ALLEGRO_BITMAP *Wall = NULL;

	//Hold the X and Y positions of the square. Starting point of the square.
	int Square_X = 100;
	int Square_Y = 100;

	//Our key states. The first slot represents "Up" 0, then "Down" 1, "Left" 2 and "Right" 3.
	bool key[4] = { false, false, false, false };

	//don't redraw until an event happens
	bool Redraw = true;

	//this controls our game loop
	bool Doexit = false;

	//get the keyboard ready to use
	al_install_keyboard();

	//set the timer so it "ticks" at 2 milliseconds
	Timer = al_create_timer(.02);

	//Creates the Display and Position its in
	Display = al_create_display(1000, 1000);
	al_set_window_position(Display, 0, 0);

	//create a little 32x32 square
	Square = al_create_bitmap(TronSize, TronSize);
	al_set_target_bitmap(Square);
	al_clear_to_color(al_map_rgb(255, 255, 0));
	al_set_target_bitmap(al_get_backbuffer(Display));
	Event_Queue = al_create_event_queue();
	//creating wall
	Wall = al_create_bitmap(WallSize, WallSize);
	al_set_target_bitmap(Wall);
	al_clear_to_color(al_map_rgb(0, 255, 255));
	al_set_target_bitmap(al_get_backbuffer(Display));
	Event_Queue = al_create_event_queue();

	al_register_event_source(Event_Queue, al_get_display_event_source(Display));
	al_register_event_source(Event_Queue, al_get_keyboard_event_source());
	
	//register the timer as an event source so it can generate events
	al_register_event_source(Event_Queue, al_get_timer_event_source(Timer));
	al_clear_to_color(al_map_rgb(0, 0, 0));

	al_flip_display();

	//Starts the Timer
	al_start_timer(Timer);


	while (!Doexit)
	{
		ALLEGRO_EVENT ev;
		//this function will wait forever if no events come in
		al_wait_for_event(Event_Queue, & ev);

		//sets this part of the game to run on the clicks of the timer 
		if (ev.type == ALLEGRO_EVENT_TIMER) {

			if (key[0] && !PlattformCollide(Square_X, Square_Y, 0, Map)) {
				Square_Y -= 4.0;
			}
			if (key[1] && !PlattformCollide(Square_X, Square_Y, 1, Map)) {
				Square_Y += 4.0;
			}
			if (key[2] && !PlattformCollide(Square_X, Square_Y, 2, Map)) {
				Square_X -= 4.0;
			}
			if (key[3] && !PlattformCollide(Square_X, Square_Y, 3, Map)) {
				Square_X += 4.0;
			}
			Redraw = true;
		}

		//////////////////////////////////////////////////////////////////
		//kill program if the user clicks the exit button
		else if (ev.type == ALLEGRO_EVENT_DISPLAY_CLOSE) {
			break;
		}
		//////////////////////////////////////////////////////////////////////////////////////////////////////

		//has something been pressed on the keyboard?
		else if (ev.type == ALLEGRO_EVENT_KEY_DOWN) {
			//"keycode" holds all the different keys on the keyboard
			switch (ev.keyboard.keycode) {
				//if the Up key has been pressed
			case ALLEGRO_KEY_UP:
				key[0] = true;
				break;
				//if the Down key has been pressed
			case ALLEGRO_KEY_DOWN:
				key[1] = true;
				break;
				//if the Left key has been pressed
			case ALLEGRO_KEY_LEFT:
				key[2] = true;
				break;
				//if the Right key has been pressed
			case ALLEGRO_KEY_RIGHT:
				key[3] = true;
				break;
			}
		}
		//has something been released on the keyboard?
		else if (ev.type == ALLEGRO_EVENT_KEY_UP) {
			switch (ev.keyboard.keycode) {
			case ALLEGRO_KEY_UP:
				key[0] = false;
				break;
			case ALLEGRO_KEY_DOWN:
				key[1] = false;
				break;
			case ALLEGRO_KEY_LEFT:
				key[2] = false;
				break;
			case ALLEGRO_KEY_RIGHT:
				key[3] = false;
				break;
				//kill the program if someone presses escape
			case ALLEGRO_KEY_ESCAPE:
				Doexit = true;
				break;
			}
		}
		//render section: draws stuff
		//if you were supposed to redraw but there wasn't an event, don't redraw
		if (Redraw && al_is_event_queue_empty(Event_Queue)) {
			Redraw = false;
			al_clear_to_color(al_map_rgb(0, 0, 0));
			//actually Draws the square
			al_draw_bitmap(Square, Square_X, Square_Y, 0);

			for (int i = 0; i < 25; i++) {
				for (int j = 0; j < 25; j++) {
					if (Map[j][i] == 1) {
						al_draw_bitmap(Wall, j * 40, i * 40, 0);
					}
			
				}
			}


			al_flip_display();

		}
	}//end game loop
	al_destroy_bitmap(Square);
	al_destroy_bitmap(Wall);
	al_destroy_timer(Timer);
	al_destroy_display(Display);
	al_destroy_event_queue(Event_Queue);

	return 0;
}
int PlattformCollide(int X, int Y, int dir, int Map[25][25]) {
	enum directions { Up, Down, Left, Right };
	//Down collision
	if (((Map[(X) / 40][(Y + 30 + 5) / 40] == 1) && dir == Down) || ((Map[(X + 30) / 40][(Y + 30 + 5) / 40] == 1) && dir == Down) || ((Map[(X + 15) / 40][(Y + 30 + 5) / 40] == 1) && dir == Down)) {
		return 1;
	}
	//Up collision
	if (((Map[(X) / 40][(Y - 5) / 40] == 1) && dir == Up) || ((Map[(X + 30) / 40][(Y - 5) / 40] == 1) && dir == Up) || ((Map[(X + 15) / 40][(Y - 5) / 40] == 1) && dir == Up)) {
		return 1;
	}
	//Left collision
	if (((Map[(X - 5) / 40][(Y) / 40] == 1) && dir == Left) || ((Map[(X - 5) / 40][(Y + 30) / 40] == 1) && dir == Left) || ((Map[(X - 5) / 40][(Y + 15) / 40] == 1) && dir == Left)) {
		return 1;
	}
	//Right collision
	if (((Map[(X + 35) / 40][(Y) / 40] == 1) && dir == 3) || ((Map[(X + 35) / 40][(Y + 30) / 40] == 1) && dir == 3) || ((Map[(X + 35) / 40][(Y + 15) / 40] == 1) && dir == Right)) {
		return 1;
	}
	else
		return 0;
}
